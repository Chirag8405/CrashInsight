# Memory-optimized Dockerfile for FREE platforms (512MB)
FROM node:18-alpine AS frontend-build

WORKDIR /app/frontend

# Copy only essential package files
COPY package.json package-lock.json ./

# Install only production dependencies for build
RUN npm ci --production=false --silent

# Copy frontend source
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Build with memory constraints
RUN NODE_OPTIONS="--max-old-space-size=400" npm run build

# Stage 2: Ultra-lightweight Python
FROM python:3.9-slim

WORKDIR /app

# Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy ultra-minimal requirements
COPY backend/requirements-ultra-minimal.txt ./requirements.txt

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY backend/ ./

# Copy built frontend from previous stage
COPY --from=frontend-build /app/frontend/dist ./static

# Set environment variables
ENV FLASK_ENV=production
ENV PYTHONUNBUFFERED=1
ENV PORT=5000

# Expose port
EXPOSE 5000

# Optimized gunicorn for low memory
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "1", "--threads", "2", "--timeout", "60", "--max-requests", "100", "app:app"]